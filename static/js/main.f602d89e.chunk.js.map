{"version":3,"sources":["components/cover.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cover","props","console","log","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mMA2DeA,E,kDArDX,WAAYC,GAAa,uCACfA,G,uDAMNC,QAAQC,IAAI,Y,+BAIZ,OAKI,6BAASC,UAAU,SAEf,yBAAKA,UAAU,mBAEX,yBAAKA,UAAU,aACX,6DACA,gFAGJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cAIX,yBAAKA,UAAU,mBACX,0BAAMA,UAAU,0BAAhB,KACA,0BAAMA,UAAU,0BAAhB,KACA,0BAAMA,UAAU,2BAAhB,IAEI,0BAAMA,UAAU,yCAQpC,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,4B,GA7ChBC,IAAMC,WC8BXC,G,6KAtBX,OACE,yBAAKH,UAAU,QAIb,kBAAC,EAAD,W,GAPUC,IAAMC,YCCJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.f602d89e.chunk.js","sourcesContent":["import React from 'react';\r\n// import { coverTypes } from '../interfaces/cover';\r\nimport logo from '../assets/images/favi-light.png';\r\n// logo, animation, name, bio, arrow\r\n\r\nclass Cover extends React.Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        // this.state = { date: new Date() };\r\n    }\r\n\r\n    onScroll() {\r\n        // if u scroll past certain point then hide === \r\n        console.log('scroll');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // logo - animating - center of section\r\n            // info - flex left - bottom\r\n            // made w/ love - flex right - bottom\r\n\r\n            <section className=\"cover\">\r\n\r\n                <div className=\"flex cover-desc\">\r\n\r\n                    <div className=\"flex-left\">\r\n                        <p>_name: chloe chantelle hoffman</p>\r\n                        <p>_bio: UI design, minimalism and tea üçµ</p>\r\n                    </div>\r\n\r\n                    <div className=\"flex-right\">\r\n                        <div className=\"cover-logo\">\r\n                            {/* <div className=\"cover-logo-image\">\r\n                                <img src={logo} />\r\n                            </div> */}\r\n                            <div className=\"cover-logo-text\">\r\n                                <span className=\"cover-logo-text--arrow\">&lt;</span>\r\n                                <span className=\"cover-logo-text--slash\">/</span>\r\n                                <span className=\"cover-logo-text--letter\">\r\n                                    c\r\n                                    <span className=\"cover-logo-text--letter--cursor\"></span>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"cover-bottom\">\r\n                    <span className=\"cover-bottom-line\"></span>\r\n                    {/* <span className=\"cover-bottom-arrow\">&lt;</span> */}\r\n                </div>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cover;\r\n","import React from 'react';\nimport Cover from './components/cover';\nimport About from './components/about';\nimport './App.scss';\n// import '../src/assets/styles/index.scss';\n// import About from './components/about';\n// import Sidenav from './components/sidenav';\n// import Timeline from './components/timeline';\n// import Projects from './components/projects';\n// import Footer from './components/footer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"home\">        \n\n        {/* <Header /> - menu if having one */}\n\n        <Cover />\n\n        {/* <Sidenav /> - Inside of each component */}\n\n        {/* <About /> */}\n\n        {/* <Timeline /> */}\n\n        {/* <Projects /> */}\n\n        {/* <Footer /> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// TODO: research this\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}